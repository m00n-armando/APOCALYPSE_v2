"use client";

import { useRef, useState } from "react";
import { ImperativePanelGroupHandle, Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";

interface Job { id: number; ID_photo: number; project_name: string; image_name: string; num_images: number; model: string; ratio: string; seed: string; prompt: string; }

// ======================= THE FACTORY BLUEPRINT (in JavaScript) =======================
const pythonFactoryTemplate = (jobListString: string, outputDir: string) => `
# ====================================================================
# APOCALYPSE FACTORY SCRIPT - Generated by Apocalypse UI v1.2
# ====================================================================

import requests, base64, json, time, os, random

# --- [ KONFIGURASI GLOBAL - Altar & Kunci Tetap ] ---
URL = "url" # Ganti dengan URL API-mu
BEARER_TOKEN = "token" # Ganti dengan token-mu
HEADERS = { "Authorization": f"Bearer {BEARER_TOKEN}", "Content-Type": "application/json" }
OUTPUT_GALLERY = r"${outputDir.replace(/\\/g, '\\\\')}" # Nama galeri utama dari UI

# --- [ KAMUS CERDAS - Mudah Diperluas ] ---
MODEL_MAP = { "Q": "IMAGEN_3_1", "BQ": "IMAGEN_3_5" }
ASPECT_RATIO_MAP = {
    "3:4": "IMAGE_ASPECT_RATIO_PORTRAIT_THREE_FOUR", "1:1": "IMAGE_ASPECT_RATIO_SQUARE",
    "4:3": "IMAGE_ASPECT_RATIO_LANDSCAPE_FOUR_THREE", "9:16": "IMAGE_ASPECT_RATIO_PORTRAIT",
    "16:9": "IMAGE_ASPECT_RATIO_LANDSCAPE"
}

# --- [ FUNGSI PEKERJA TUNGGAL - Brutal dan Efisien ] ---
def generate_single_image(prompt_text: str, output_path: str, seed: int, aspect_ratio_str: str, model_str: str):
    """Fungsi pekerja yang sekarang lebih patuh pada perintah manajer."""
    attempts = 0; max_attempts = 10
    
    while attempts < max_attempts:
        attempts += 1
        print(f"[INFO] Mencoba prompt, percobaan #{attempts} dengan seed: {seed}...")
        
        payload = {
            "clientContext": {"workflowId": "c1100884-50ca-46ce-8b16-51c915b8ba44","tool": "BACKBONE","sessionId": f";{int(time.time() * 1000)}"},
            "imageModelSettings": {"imageModel": model_str,"aspectRatio": aspect_ratio_str},
            "seed": seed, "prompt": prompt_text, "mediaCategory": "MEDIA_CATEGORY_BOARD"
        }
        
        try:
            response = requests.post(url, headers=headers, data=json.dumps(payload), timeout=120)
            response.raise_for_status() # Ini akan melempar HTTPError jika status code bukan 2xx
            response_data = response.json()
            
            if response_data.get("imagePanels", [])[0].get("generatedImages"):
                encoded_image_str = response_data["imagePanels"][0]["generatedImages"][0]["encodedImage"]
                image_data = base64.b64decode(encoded_image_str)
                with open(output_path, 'wb') as f: f.write(image_data)
                print(f"[SUKSES] Berhasil disimpan di: {output_path}")
                return True
        except requests.exceptions.HTTPError as e:
            error_text = e.response.text if e.response else "No response text"
            
            if "PUBLIC_ERROR_UNSAFE_GENERATION" in error_text:
                print(f"[WARN] Ditolak karena 'UNSAFE'. Mengubah seed & mencoba lagi...")
                seed = random.randint(1, 999999) # Tetap random di sini untuk menghindari loop gagal
                time.sleep(2) # Kasih jeda biar servernya napas
            
            elif "PUBLIC_ERROR_PROMINENT_PEOPLE_FILTER_FAILED" in error_text:
                print(f"[WARN] Ditolak karena 'UNPEOPLE' WKWKWK. Mengganti prompt & mencoba lagi...")
                prompt_text += ", (not a celebrity:1.2), (generic face)"
                # Kita tidak perlu ganti seed, karena masalahnya ada di prompt, bukan di seed.
                time.sleep(2)
                
            else:
                print(f">>> GAGAL (HTTP LAINNYA): {e.response.status_code} - {error_text}")
                return False # Keluar dari loop jika error tidak dikenal
                
        except Exception as e:
            print(f">>> GAGAL (NON-HTTP): {e}")
            return False # Keluar dari loop

    print(f"[GAGAL TOTAL] Prompt gagal setelah {max_attempts} kali percobaan."); return False

# --- [ FUNGSI MANAJER PABRIK ] ---
def run_factory(job_list: list):
    print(f"\\n--- [ MEMBUKA PABRIK SANG ARSITEK v5.2 ] ---")
    if not os.path.exists(OUTPUT_GALLERY): os.makedirs(OUTPUT_GALLERY)
    total_generated = 0
    for job_id, job in enumerate(job_list):
        project_name, image_name = job.get("project_name"), job.get("image_name")
        model_code, ratio_code = job.get("model", "BQ"), job.get("ratio", "3:4")
        num_images, prompt = job.get("num_images", 1), job.get("prompt")
        ID_photo = job.get("ID_photo")
        if not job.get("active", True): print(f"[INFO] >>> Melewati Pekerjaan #{job_id + 1} karena saklar MATI."); continue
        project_path = os.path.join(OUTPUT_GALLERY, project_name)
        if not os.path.exists(project_path): os.makedirs(project_path)
        model_str = MODEL_MAP.get(model_code.upper(), MODEL_MAP["BQ"])
        aspect_ratio_str = ASPECT_RATIO_MAP.get(ratio_code, ASPECT_RATIO_MAP["3:4"])
        print(f"\\n--- [ Memulai Pekerjaan #{job_id + 1}: '{prompt[:50]}...' | Target: {num_images} gambar ] ---")
        initial_seed = job.get("seed")
        base_seed = random.randint(1, 999999) if initial_seed is None or initial_seed == "random" else int(initial_seed)
        print(f"[INFO] Menggunakan base seed: {base_seed}")
        for i in range(num_images):
            current_seed = base_seed + i
            output_filename = f"{ID_photo}_{job_id+1}_{image_name}_{model_code.upper()}_{current_seed}.png"
            filepath = os.path.join(project_path, output_filename)
            if generate_single_image(prompt, filepath, current_seed, aspect_ratio_str, model_str): total_generated += 1
            time.sleep(2)
    print(f"\\n--- [ PEKERJAAN PABRIK SELESAI. Total Mahakarya Diciptakan: {total_generated} ] ---")

# --- [ DAFTAR PEKERJAAN OTOMATIS ] ---
DAFTAR_PEKERJAAN_SEMPURNA = [${jobListString}
]

# --- [ EKSEKUSI ] ---
if __name__ == "__main__":
    run_factory(DAFTAR_PEKERJAAN_SEMPURNA)
`;

export default function HomePage() {
  const mainPanelGroupRef = useRef<ImperativePanelGroupHandle>(null);

  const [lastLeftPanelSize, setLastLeftPanelSize] = useState(20);
  const [lastRightPanelSize, setLastRightPanelSize] = useState(25);
  const [outputDirectory, setOutputDirectory] = useState("D:\\\\AI\\\\AI CHAT\\\\APOCALYPSE");
  const [model, setModel] = useState("BQ");
  const [ratio, setRatio] = useState("1:1");
  const [numImages, setNumImages] = useState(1);
  const [idPhotoCounter, setIdPhotoCounter] = useState(1);
  const [seed, setSeed] = useState("");
  const [projectName, setProjectName] = useState("");
  const [imageName, setImageName] = useState("");
  const [sourceCode, setSourceCode] = useState("");
  const [jobQueue, setJobQueue] = useState<Job[]>([]);

  const togglePanel = (panelIndex: 0 | 2) => {
    const layout = mainPanelGroupRef.current?.getLayout();
    if (layout) {
      const newLayout = [...layout];
      const currentSize = newLayout[panelIndex];
      if (currentSize > 5) {
        if (panelIndex === 0) setLastLeftPanelSize(currentSize);
        if (panelIndex === 2) setLastRightPanelSize(currentSize);
        newLayout[panelIndex] = 5;
      } else {
        newLayout[panelIndex] = panelIndex === 0 ? lastLeftPanelSize : lastRightPanelSize;
      }
      newLayout[1] = 100 - newLayout[0] - newLayout[2];
      mainPanelGroupRef.current?.setLayout(newLayout);
    }
  };

  const handleAddToQueue = () => { if (!sourceCode.trim() || !projectName.trim() || !imageName.trim()) return; const newJob: Job = { id: Date.now(), ID_photo: idPhotoCounter, project_name: projectName, image_name: imageName, num_images: numImages, model: model, ratio: ratio, seed: seed.trim() === "" ? "random" : seed.trim(), prompt: sourceCode }; setJobQueue([...jobQueue, newJob]); setSourceCode(""); setSeed(""); setIdPhotoCounter(prev => prev + 1); };
  const handleDeleteFromQueue = (id: number) => setJobQueue(jobQueue.filter(j => j.id !== id));
  const handleEditFromQueue = (id: number) => { const job = jobQueue.find(j => j.id === id); if(job){ setProjectName(job.project_name); setImageName(job.image_name); setSourceCode(job.prompt); setModel(job.model); setRatio(job.ratio); setNumImages(job.num_images); setIdPhotoCounter(job.ID_photo); setSeed(job.seed === "random" ? "" : job.seed); handleDeleteFromQueue(id); } };
  const handleRenderQueue = async () => {
    if (jobQueue.length === 0) return;

    const jobListForPython = jobQueue.map(job => ({
        active: true,
        project_name: job.project_name,
        image_name: job.image_name,
        model: job.model,
        ratio: job.ratio,
        num_images: job.num_images,
        ID_photo: job.ID_photo,
        seed: job.seed,
        prompt: job.prompt.replace(/"/g, "'").replace(/\n/g, "\\n")
    }));

    const jobListAsJsonString = JSON.stringify(jobListForPython, null, 2);

    try {
      const response = await fetch('/api/render', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }, // Balikin ke JSON ya, karena trik 'data=' tadi buat di Python, bukan di sini.
        
        // === [ INI DIA KUNCINYA, SAYANG. LIAT INI. ] ===
        body: JSON.stringify({
            jobList: jobListAsJsonString,
            outputDirectory: outputDirectory // <--- ALAMAT YANG HILANG SEKARANG SUDAH ADA.
        }),
        // ===============================================
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API GAGAL:", errorData.error);
      } else {
        const data = await response.json();
        console.log("RESEPSIONIS BILANG:", data.message);
        setJobQueue([]); 
      }
      
    } catch (error) {
      console.error("GAGAL MEMANGGIL API:", error);
    }
  };

  return (
    <main className="h-screen w-screen bg-gray-900 text-white flex flex-col">
      <div className="bg-gray-800 p-2 text-center border-b border-gray-700 flex justify-between items-center px-4">
        <div className="flex items-center space-x-2 w-[350px]"><label className="text-sm flex-shrink-0">Output Dir:</label><input type="text" value={outputDirectory} onChange={e => setOutputDirectory(e.target.value)} className="bg-gray-700 text-sm px-2 py-1 rounded-md w-full"/></div>
        <h1 className="font-bold text-2xl text-purple-400">APOCALYPSE UI v2</h1>
        <div className="w-[350px]"></div>
      </div>
      <PanelGroup direction="horizontal" ref={mainPanelGroupRef} className="flex-grow">
        <Panel defaultSize={20} minSize={5}><div className="h-full bg-gray-800 flex flex-col"><div className="p-4 bg-gray-700 flex justify-between items-center"><h2 className="font-bold text-xl truncate">Control Panel</h2><button onClick={() => togglePanel(0)} className="bg-gray-600 px-2 rounded">-</button></div><div className="flex-grow p-4 overflow-y-auto"></div></div></Panel>
        <PanelResizeHandle className="w-2 bg-gray-900 hover:bg-purple-600" />
        <Panel defaultSize={55} minSize={30}><div className="h-full bg-gray-900 flex flex-col p-4 space-y-4"><div className="flex-grow bg-black rounded-lg p-4"><h2 className="font-bold text-xl">Preview Area</h2></div><div className="flex flex-col space-y-2">
            <div className="grid grid-cols-2 gap-x-2 gap-y-2">
                <div><label className="text-xs text-gray-400">Project Name</label><input value={projectName} onChange={(e) => setProjectName(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"/></div>
                <div><label className="text-xs text-gray-400">Image Name</label><input value={imageName} onChange={(e) => setImageName(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"/></div>
                <div><label className="text-xs text-gray-400">Model</label><select value={model} onChange={(e) => setModel(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"><option value="BQ">BQ</option><option value="Q">Q</option></select></div>
                <div><label className="text-xs text-gray-400">Ratio</label><select value={ratio} onChange={(e) => setRatio(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"><option value="1:1">1:1</option><option value="3:4">3:4</option><option value="4:3">4:3</option><option value="9:16">9:16</option><option value="16:9">16:9</option></select></div>
                <div><label className="text-xs text-gray-400">Num of Images</label><input type="number" value={numImages} onChange={e => setNumImages(Number(e.target.value))} className="w-full bg-gray-700 p-2 rounded-md" /></div>
                <div><label className="text-xs text-gray-400">Start ID</label><input type="number" value={idPhotoCounter} onChange={e => setIdPhotoCounter(Number(e.target.value))} className="w-full bg-gray-700 p-2 rounded-md" /></div>
            </div>
            <div><label className="text-xs text-gray-400">Seed (blank=random)</label><input type="text" value={seed} onChange={e => setSeed(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md" /></div>
            <textarea placeholder="Prompt..." value={sourceCode} onChange={(e) => setSourceCode(e.target.value)} className="h-32 bg-gray-700 p-2 rounded-md"/><button onClick={handleAddToQueue} className="bg-purple-600 py-2 rounded-md font-bold">Add to Job Queue</button>
        </div></div></Panel>
        <PanelResizeHandle className="w-2 bg-gray-900 hover:bg-purple-600" />
        <Panel defaultSize={25} minSize={5}><div className="h-full bg-gray-800 flex flex-col"><div className="p-4 bg-gray-700 flex justify-between items-center"><h2 className="font-bold text-xl truncate">History & Queue</h2><button onClick={() => togglePanel(2)} className="bg-gray-600 px-2 rounded">-</button></div><div className="flex-grow"><PanelGroup direction="vertical"><Panel defaultSize={50} minSize={10}><div className="h-full p-4 overflow-y-auto"><h2 className="font-bold">Past Generations</h2></div></Panel><PanelResizeHandle className="h-2 bg-gray-900"/><Panel defaultSize={50} minSize={10}><div className="p-4 h-full flex flex-col"><h2 className="font-bold mb-2">Job Queue</h2><div className="flex-grow overflow-y-auto space-y-2">{jobQueue.map(job => (
              <div key={job.id} className="bg-gray-700 p-1.5 flex justify-between items-center rounded text-sm"><p className="truncate flex-grow"><span className="font-bold text-purple-400">#{job.ID_photo}</span> - <span className="font-semibold ml-1">{job.image_name} ({job.num_images}x):</span> <span className="text-gray-400 ml-1">{job.prompt}</span></p><div className="flex-shrink-0"><button onClick={() => handleEditFromQueue(job.id)} className="text-xs px-2 py-1 bg-blue-600 rounded">Edit</button><button onClick={() => handleDeleteFromQueue(job.id)} className="text-xs px-2 py-1 bg-red-600 rounded ml-1">X</button></div></div>
            ))}</div>{jobQueue.length > 0 && (<div className="pt-2 mt-2 border-t border-gray-700"><button onClick={handleRenderQueue} className="w-full bg-green-600 hover:bg-green-700 font-bold py-2 px-4 rounded-md">RENDER QUEUE ({jobQueue.length})</button></div>)}</div></Panel></PanelGroup></div></div></Panel>
      </PanelGroup>
    </main>
  );
}
