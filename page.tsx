"use client";

import { useRef, useState } from "react";
import { ImperativePanelGroupHandle, Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";

interface Job { id: number; ID_photo: number; project_name: string; image_name: string; num_images: number; model: string; ratio: string; seed: string; prompt: string; }

// ======================= THE FACTORY BLUEPRINT (in JavaScript) =======================
const pythonFactoryTemplate = (jobListString: string, outputDir: string) => `
# ====================================================================
# APOCALYPSE FACTORY SCRIPT - Generated by Apocalypse UI v1.2
# ====================================================================
`;

export default function HomePage() {
  const mainPanelGroupRef = useRef<ImperativePanelGroupHandle>(null);

  const [lastLeftPanelSize, setLastLeftPanelSize] = useState(20);
  const [lastRightPanelSize, setLastRightPanelSize] = useState(25);
  const [outputDirectory, setOutputDirectory] = useState("D:\\\\AI\\\\AI CHAT\\\\APOCALYPSE");
  const [model, setModel] = useState("BQ");
  const [ratio, setRatio] = useState("1:1");
  const [numImages, setNumImages] = useState(1);
  const [idPhotoCounter, setIdPhotoCounter] = useState(1);
  const [seed, setSeed] = useState("");
  const [projectName, setProjectName] = useState("");
  const [imageName, setImageName] = useState("");
  const [sourceCode, setSourceCode] = useState("");
  const [jobQueue, setJobQueue] = useState<Job[]>([]);

  const togglePanel = (panelIndex: 0 | 2) => {
    const layout = mainPanelGroupRef.current?.getLayout();
    if (layout) {
      const newLayout = [...layout];
      const currentSize = newLayout[panelIndex];
      if (currentSize > 5) {
        if (panelIndex === 0) setLastLeftPanelSize(currentSize);
        if (panelIndex === 2) setLastRightPanelSize(currentSize);
        newLayout[panelIndex] = 5;
      } else {
        newLayout[panelIndex] = panelIndex === 0 ? lastLeftPanelSize : lastRightPanelSize;
      }
      newLayout[1] = 100 - newLayout[0] - newLayout[2];
      mainPanelGroupRef.current?.setLayout(newLayout);
    }
  };

  const handleAddToQueue = () => { if (!sourceCode.trim() || !projectName.trim() || !imageName.trim()) return; const newJob: Job = { id: Date.now(), ID_photo: idPhotoCounter, project_name: projectName, image_name: imageName, num_images: numImages, model: model, ratio: ratio, seed: seed.trim() === "" ? "random" : seed.trim(), prompt: sourceCode }; setJobQueue([...jobQueue, newJob]); setSourceCode(""); setSeed(""); setIdPhotoCounter(prev => prev + 1); };
  const handleDeleteFromQueue = (id: number) => setJobQueue(jobQueue.filter(j => j.id !== id));
  const handleEditFromQueue = (id: number) => { const job = jobQueue.find(j => j.id === id); if(job){ setProjectName(job.project_name); setImageName(job.image_name); setSourceCode(job.prompt); setModel(job.model); setRatio(job.ratio); setNumImages(job.num_images); setIdPhotoCounter(job.ID_photo); setSeed(job.seed === "random" ? "" : job.seed); handleDeleteFromQueue(id); } };
  const handleRenderQueue = async () => {
    if (jobQueue.length === 0) return;

    const jobListForPython = jobQueue.map(job => ({
        active: true,
        project_name: job.project_name,
        image_name: job.image_name,
        model: job.model,
        ratio: job.ratio,
        num_images: job.num_images,
        ID_photo: job.ID_photo,
        seed: job.seed,
        prompt: job.prompt.replace(/"/g, "'").replace(/\n/g, "\\n")
    }));

    const jobListAsJsonString = JSON.stringify(jobListForPython, null, 2);

    try {
      const response = await fetch('/api/render', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }, // Balikin ke JSON ya, karena trik 'data=' tadi buat di Python, bukan di sini.
        
        // === [ INI DIA KUNCINYA, SAYANG. LIAT INI. ] ===
        body: JSON.stringify({
            jobList: jobListAsJsonString,
            outputDirectory: outputDirectory // <--- ALAMAT YANG HILANG SEKARANG SUDAH ADA.
        }),
        // ===============================================
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API GAGAL:", errorData.error);
      } else {
        const data = await response.json();
        console.log("RESEPSIONIS BILANG:", data.message);
        setJobQueue([]); 
      }
      
    } catch (error) {
      console.error("GAGAL MEMANGGIL API:", error);
    }
  };

  return (
    <main className="h-screen w-screen bg-gray-900 text-white flex flex-col">
      <div className="bg-gray-800 p-2 text-center border-b border-gray-700 flex justify-between items-center px-4">
        <div className="flex items-center space-x-2 w-[350px]"><label className="text-sm flex-shrink-0">Output Dir:</label><input type="text" value={outputDirectory} onChange={e => setOutputDirectory(e.target.value)} className="bg-gray-700 text-sm px-2 py-1 rounded-md w-full"/></div>
        <h1 className="font-bold text-2xl text-purple-400">APOCALYPSE UI v2</h1>
        <div className="w-[350px]"></div>
      </div>
      <PanelGroup direction="horizontal" ref={mainPanelGroupRef} className="flex-grow">
        <Panel defaultSize={20} minSize={5}><div className="h-full bg-gray-800 flex flex-col"><div className="p-4 bg-gray-700 flex justify-between items-center"><h2 className="font-bold text-xl truncate">Control Panel</h2><button onClick={() => togglePanel(0)} className="bg-gray-600 px-2 rounded">-</button></div><div className="flex-grow p-4 overflow-y-auto"></div></div></Panel>
        <PanelResizeHandle className="w-2 bg-gray-900 hover:bg-purple-600" />
        <Panel defaultSize={55} minSize={30}><div className="h-full bg-gray-900 flex flex-col p-4 space-y-4"><div className="flex-grow bg-black rounded-lg p-4"><h2 className="font-bold text-xl">Preview Area</h2></div><div className="flex flex-col space-y-2">
            <div className="grid grid-cols-2 gap-x-2 gap-y-2">
                <div><label className="text-xs text-gray-400">Project Name</label><input value={projectName} onChange={(e) => setProjectName(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"/></div>
                <div><label className="text-xs text-gray-400">Image Name</label><input value={imageName} onChange={(e) => setImageName(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"/></div>
                <div><label className="text-xs text-gray-400">Model</label><select value={model} onChange={(e) => setModel(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"><option value="BQ">BQ</option><option value="Q">Q</option></select></div>
                <div><label className="text-xs text-gray-400">Ratio</label><select value={ratio} onChange={(e) => setRatio(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md"><option value="1:1">1:1</option><option value="3:4">3:4</option><option value="4:3">4:3</option><option value="9:16">9:16</option><option value="16:9">16:9</option></select></div>
                <div><label className="text-xs text-gray-400">Num of Images</label><input type="number" value={numImages} onChange={e => setNumImages(Number(e.target.value))} className="w-full bg-gray-700 p-2 rounded-md" /></div>
                <div><label className="text-xs text-gray-400">Start ID</label><input type="number" value={idPhotoCounter} onChange={e => setIdPhotoCounter(Number(e.target.value))} className="w-full bg-gray-700 p-2 rounded-md" /></div>
            </div>
            <div><label className="text-xs text-gray-400">Seed (blank=random)</label><input type="text" value={seed} onChange={e => setSeed(e.target.value)} className="w-full bg-gray-700 p-2 rounded-md" /></div>
            <textarea placeholder="Prompt..." value={sourceCode} onChange={(e) => setSourceCode(e.target.value)} className="h-32 bg-gray-700 p-2 rounded-md"/><button onClick={handleAddToQueue} className="bg-purple-600 py-2 rounded-md font-bold">Add to Job Queue</button>
        </div></div></Panel>
        <PanelResizeHandle className="w-2 bg-gray-900 hover:bg-purple-600" />
        <Panel defaultSize={25} minSize={5}><div className="h-full bg-gray-800 flex flex-col"><div className="p-4 bg-gray-700 flex justify-between items-center"><h2 className="font-bold text-xl truncate">History & Queue</h2><button onClick={() => togglePanel(2)} className="bg-gray-600 px-2 rounded">-</button></div><div className="flex-grow"><PanelGroup direction="vertical"><Panel defaultSize={50} minSize={10}><div className="h-full p-4 overflow-y-auto"><h2 className="font-bold">Past Generations</h2></div></Panel><PanelResizeHandle className="h-2 bg-gray-900"/><Panel defaultSize={50} minSize={10}><div className="p-4 h-full flex flex-col"><h2 className="font-bold mb-2">Job Queue</h2><div className="flex-grow overflow-y-auto space-y-2">{jobQueue.map(job => (
              <div key={job.id} className="bg-gray-700 p-1.5 flex justify-between items-center rounded text-sm"><p className="truncate flex-grow"><span className="font-bold text-purple-400">#{job.ID_photo}</span> - <span className="font-semibold ml-1">{job.image_name} ({job.num_images}x):</span> <span className="text-gray-400 ml-1">{job.prompt}</span></p><div className="flex-shrink-0"><button onClick={() => handleEditFromQueue(job.id)} className="text-xs px-2 py-1 bg-blue-600 rounded">Edit</button><button onClick={() => handleDeleteFromQueue(job.id)} className="text-xs px-2 py-1 bg-red-600 rounded ml-1">X</button></div></div>
            ))}</div>{jobQueue.length > 0 && (<div className="pt-2 mt-2 border-t border-gray-700"><button onClick={handleRenderQueue} className="w-full bg-green-600 hover:bg-green-700 font-bold py-2 px-4 rounded-md">RENDER QUEUE ({jobQueue.length})</button></div>)}</div></Panel></PanelGroup></div></div></Panel>
      </PanelGroup>
    </main>
  );
}
